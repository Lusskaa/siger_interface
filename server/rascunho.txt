      
      lastDateDone: Yup.date().transform((value, originalValue) => {}),
      
      lastDateDone: {
        allowNull: false, // última data que este teste foi feito pelo usuário
        type: Sequelize.DATE
      },
      nextDateDone: {
        allowNull: false, // proxima data que este teste deve ser feito pelo usuário
        type: Sequelize.DATE
      },





      'use strict'

module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.createTable('testes', {
      id: {

        type: Sequelize.INTEGER, // vamos fazer aqui a ID de cada teste que pode ser criado pelo usuário admin
        allowNull: false,
        autoIncrement: true,
        primaryKey: true

      },
      name: {
        allowNull: false, // todos os testes de controle de qualidade devem ter um nome que referencie a algum documento de TQ
        type: Sequelize.STRING
      },
      frequencyRecomedation: {
        allowNull: false, // esta frequencia de recomendaçao deve ser adicionada de forma que o usuário possa saber o que o documento recomenda
        type: Sequelize.STRING,
        unique: true
      },
      description: {
        type: Sequelize.STRING, // descriçao breve de como o teste pode ser feito
        allowNull: true
      },
      category: {
        type: Sequelize.STRING, // a sua categoria deve ser do tipo diário, mensal ou anual
        allowNull: true
      },
      tolerance: {
        type: Sequelize.INTEGER, // a tolerancia do teste deve ser informada para que o usuário possa saber as tolerancias recomendadas para este tipo de teste
        allowNull: false
      },
      created_at: {
        allowNull: false,
        type: Sequelize.DATE

      },
      updated_at: {
        allowNull: false,
        type: Sequelize.DATE

      }
    })
  },
  // toda vez que executar o programa ele vai para este up
  /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */
  async down (queryInterface) {
    await queryInterface.dropTable('testes')
  }
}

/**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */

 'use strict'

 module.exports = {
   async up (queryInterface, Sequelize) {
     await queryInterface.createTable('testes', {
       id: {
 
         type: Sequelize.INTEGER, // vamos fazer aqui a ID de cada teste que pode ser criado pelo usuário admin
         allowNull: false,
         autoIncrement: true,
         primaryKey: true
 
       },
       name: {
         allowNull: false, // todos os testes de controle de qualidade devem ter um nome que referencie a algum documento de TQ
         type: Sequelize.STRING
       },
       frequencyRecomedation: {
         allowNull: false, // esta frequencia de recomendaçao deve ser adicionada de forma que o usuário possa saber o que o documento recomenda
         type: Sequelize.STRING,
         unique: true
       },
       description: {
         type: Sequelize.STRING, // descriçao breve de como o teste pode ser feito
         allowNull: true
       },
       category: {
         type: Sequelize.STRING, // a sua categoria deve ser do tipo diário, mensal ou anual
         allowNull: true
       },
       tolerance: {
         type: Sequelize.INTEGER, // a tolerancia do teste deve ser informada para que o usuário possa saber as tolerancias recomendadas para este tipo de teste
         allowNull: false
       },
       created_at: {
         allowNull: false,
         type: Sequelize.DATE
 
       },
       updated_at: {
         allowNull: false,
         type: Sequelize.DATE
 
       }
     })
   },
 
   async down (queryInterface) {
     await queryInterface.dropTable('testes')
   }
 }
 

 
import { v4 } from 'uuid'
import * as Yup from 'yup'
import Test from '../models/Test'

class TestesController {
  async store (request, response) {
    const schema = Yup.object().shape({
      name: Yup.string().required(),
      frequencyRecomedation: Yup.string().required(),
      description: Yup.string(),
      category: Yup.string().required(),
      tolerance: Yup.number().required()

    })

    try {
      await schema.validateSync(request.body, { abortEarly: false })
    } catch (err) {
      return response.status(400).json({ error: err.errors })
    }

    const { name, frequencyRecomedation, description, category, tolerance } = request.body

    const teste = await Test.create({
      id: v4(),
      name,
      frequencyRecomedation,
      description,
      category,
      tolerance
    })

    return response.status(201).json(teste)
  }
}

export default new TestesController()


import Sequelize, { Model } from 'sequelize'

class Test extends Model {
  static init (sequelize) {
    super.init(
      {
        name: Sequelize.STRING,
        frequencyRecomedation: Sequelize.STRING,
        description: Sequelize.STRING,
        category: Sequelize.STRING,
        tolerance: Sequelize.INTEGER

      },
      {
        sequelize
      }
    )
  }
}
export default Test









deleate column




module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.removeColumn('testes', 'category')
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.createColumn('testes', {
      category: {
        type: Sequelize.STRING, // a sua categoria deve ser do tipo MECANICO, DOSIMÉTRICO OU HDHSHHSH
        allowNull: false
      }
    })
  }
}